---
name: {{cookiecutter.project_slug}} Release Container

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)
# DOCKER_USERNAME            (Optional, required for image pushing...)
# DOCKER_TOKEN               (Optional, required for image pushing...)

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-20.04
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup Environment
        run: |
          echo "WEBHOOK_URL=${WEBHOOK_URL}" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=${DOCKER_USERNAME}" >> $GITHUB_ENV
          echo "PROJECT_NAME={{cookiecutter.project_slug}}" >> $GITHUB_ENV
          echo "USERNAME={{cookiecutter.github_username}}" >> $GITHUB_ENV
          echo "CD_ENABLED=false" >> $GITHUB_ENV
{% raw %}
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Create Docker Mounted Content
        run: |
          echo | ssh-keygen
          touch ${HOME}/.gitconfig
          touch ${HOME}/.gitconfig_global

      - name: Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Construct Image Tag
        run: |
          echo "IMAGE_NAME=${DOCKER_USERNAME}/${PROJECT_NAME}:${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # START Continuous Deployment -- Customize this Section Depending on your strategy

      - name: Is CD enabled?
        if: env.DOCKER_USERNAME != ''
        run: |
          [[ -n "${DOCKER_TOKEN}" ]] && echo "CD_ENABLED=true" >> $GITHUB_ENV
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      # Configure Docker Buildx
      - uses: docker/setup-buildx-action@v1

      # Note: This is configured for dockerhub, but this action is highly customizable
      # https://github.com/docker/login-action
      - name: Login to DockerHub
        if: env.CD_ENABLED == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Note: This is configured for dockerhub, but this action is highly customizable
      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build and push
        if: env.CD_ENABLED == 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./assets/Dockerfile
          push: true
          target: production
          tags: |
            ${{ env.IMAGE_NAME }}

      # END Continuous Deployment -- Customize this Section Depending on your strategy

      - name: Production -- Report Success
        if: env.CD_ENABLED == 'true'
        run: |
          ./scripts/ci/slack.sh "${PROJECT_NAME}:${GITHUB_REF#refs/tags/}" "new docker image has been produced and pushed!"

      - name: Production -- Report Success
        if: env.CD_ENABLED != 'true'
        run: |
          ./scripts/ci/slack.sh "${PROJECT_NAME}:${GITHUB_REF#refs/tags/}" "new docker image has been built, but CD is disabled for this repository!"

      - name: Production -- Report Failure
        if: failure()
        run: |
          ./scripts/ci/slack.sh "${PROJECT_NAME}:${GITHUB_REF#refs/tags/}" "automated docker image production has failed!"
{% endraw %}