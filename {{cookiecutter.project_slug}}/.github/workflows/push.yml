---
name: {{cookiecutter.project_slug}} Generic Push

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-20.04
    steps:

      - uses: actions/checkout@v1

      - name: Setup Environment
        run: |
          BRANCH_OR_TAG="$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///g' | sed 's/refs\/tags\///g')"
          echo "BRANCH_OR_TAG=${BRANCH_OR_TAG}" >> $GITHUB_ENV
          echo "WEBHOOK_URL=${WEBHOOK_URL}" >> $GITHUB_ENV
          echo "PROJECT_NAME={{cookiecutter.project_slug}}" >> $GITHUB_ENV
          echo "USERNAME={{cookiecutter.github_username}}" >> $GITHUB_ENV
          echo "VALID_RELEASE=not_a_validated_release" >> $GITHUB_ENV
{% raw %}
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Docker Mounted Content
        run: |
          echo | ssh-keygen
          touch ${HOME}/.gitconfig
          touch ${HOME}/.gitconfig_global

      - name: Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Build Container
        run: |
          docker-compose build
          docker-compose up -d

      - name: Run TOML Linter
        run: |
          docker-compose exec -T "${PROJECT_NAME}" tomll /app/pyproject.toml

      - name: Run Linter
        run: |
          docker-compose exec -T "${PROJECT_NAME}" dev lint

      - name: Run Sec Test
        run: |
          docker-compose exec -T "${PROJECT_NAME}" dev sectest

      - name: Run Unit Tests
        run: |
          docker-compose exec -T "${PROJECT_NAME}" dev coverage

      - name: Run Release Validation
        run: |
          docker-compose exec -T "${PROJECT_NAME}" ./scripts/release.sh

      - name: Documentation Validation
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.11
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Report Build Failures
        if: failure() == true
        run: |
          ./scripts/ci/slack.sh "${PROJECT_NAME}" "build on push has failed!"

      - name: Report Build Successes
        run: |
          ./scripts/ci/slack.sh "${PROJECT_NAME}" "build on push succeeded for ${BRANCH_OR_TAG}!"

      - name: Releases -- Detect A Release Tag
        if: contains(github.ref, '/tags/v') == true
        run: |
          VALID_RELEASE=$(git diff origin/production)
          echo 'VALID_RELEASE<<EOF' >> $GITHUB_ENV
          echo "${VALID_RELEASE}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Releases -- Prepare Release Content
        if: contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        run: |
          echo "{}" > package.json

      - name: Production -- Generate Changelog
        if: contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        uses: scottbrenner/generate-changelog-action@1.0.3
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Production -- Create Release
        if: contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
            ## Deployment Checklist
            - [ ] Ensure documentation is accurate
            - [ ] Ensure readthedocs integration is working
            - [ ] Ensure unnecessary alerts are ignored/disabled
          draft: true
          prerelease: false

      - name: Production -- Report Success
        if: contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        run: |
          ./scripts/ci/slack.sh "${PROJECT_NAME}" "automated release has been created for ${BRANCH_OR_TAG}:\n  https://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Production -- Report Failure
        if: failure() == true && contains(github.ref, '/tags/v') == true && env.VALID_RELEASE == ''
        run: |
          ./scripts/ci/slack.sh "${PROJECT_NAME}" "automated release has failed for ${BRANCH_OR_TAG}!"
{% endraw %}