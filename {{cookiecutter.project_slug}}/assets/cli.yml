# Development Environment CLI Configuration
---
- name: "build-docs"
  description: "Build the project's documentation."
  path: "documentation_root"
  commands:
    - '[ ! -d "./source/codebase/${PROJECT_NAME}/_autosummary" ] || rm -rf "./source/codebase/${PROJECT_NAME}/_autosummary"'
    - "make html"
  success: "Documentation Built"
  failure: "Error Building Documentation"
- name: "build-wheel"
  description: "Build a distribution wheel."
  path: "git_root"
  commands:
    - "poetry build"
  success: "Wheel Built"
  failure: "Error Building Wheel"
- name: "coverage"
  description: "Run code coverage test."
  path: "git_root"
  commands:
    - 'pytest --cov-report term-missing --cov-report html --cov-fail-under=100 --cov="${PROJECT_NAME}" "${PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}'
  success: "Coverage Passed!"
  failure: "Coverage Failed!"
- name: "fmt"
  description: "Run code formatters."
  container_only: true
  path: "git_root"
  commands:
    - |
      _WORD_COUNT="$(expr $(wc -l .aspell.pws | cut -d"." -f1) - 2)"
      _WORD_LIST="$(sed "1,1d" .aspell.pws | sort --unique)"
      _LANGUAGE="$(echo "${GIT_HOOKS_ASPELL_LANG}" | cut -d"_" -f1)"
      _HEADER="$(echo "personal_ws-1.1 "${_LANGUAGE}" ${_WORD_COUNT}")"
      printf "%s\n%s\n" "${_HEADER}" "${_WORD_LIST}" > .aspell.pws
    - 'tomll pyproject.toml'
    - 'yapf -i --recursive .'
    - 'isort "${PROJECT_NAME}"'
  success: "Formatting Finished!"
  failure: "Formatting Error!"
- name: "leaks"
  description: "Run a scan for leaked credentials in commits."
  container_only: true
  path: "git_root"
  commands:
    - 'gitleaks detect -v'
  success: "Credential Leaks Test Passed!"
  failure: "Credential Leaks Test Failed!"
- name: "lint"
  description: "Run the code linters."
  path: "git_root"
  commands:
    - 'shellcheck ${PROJECT_NAME}/container_init.sh'
{%- if cookiecutter.lint_docstrings == 'true' %}
    - 'pydocstyle "${PROJECT_NAME}"'
    - 'pydocstyle --config=.pydocstyle.tests "${PROJECT_NAME}"'
{%- endif %}
    - 'yamllint . assets/ .github/workflows/'
    - 'isort -c "${PROJECT_NAME}"'
    - 'pytest --pylint --pylint-jobs=2 "${PROJECT_NAME}"'
  success: "Linter Test Passed!"
  failure: "Linter Test Failed!"
- name: "reinstall-requirements"
  description: "Reinstall the project requirements."
  path: "git_root"
  commands:
    - "poetry lock"
    - "poetry install -E docs"
  success: "Reinstall Succeeded!"
  failure: "Reinstall Failed!"
- name: "sectest"
  description: "Run the security tests."
  path: "git_root"
  commands:
    - 'bandit -r "${PROJECT_NAME}" -c .bandit.rc --ini .bandit -x tests'
    - 'echo "\nPoetry is exporting the lockfile standby..."'
    - 'poetry export --without-hashes -f requirements.txt | safety check --stdin'
  success: "Security Test Passed!"
  failure: "Security Test Failed!"
- name: "test"
  description: "Run the unittests."
  path: "git_root"
  commands:
    - 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
  success: "Unittests Passed!"
  failure: "Unittests Failed!"
- name: "types"
  description: "Run the type checker."
  path: "git_root"
{%- if cookiecutter.typing_support == 'true' %}
  commands:
    - 'mypy --strict ${PROJECT_NAME}/'
  success: "Type Check Passed!"
  failure: "Type Check Failed!"
{%- endif %}
{%- if cookiecutter.typing_support == 'false' %}
  commands:
    - 'echo "Typing is disabled for this project."'
  success: ""
  failure: ""
{%- endif %}
