# Development Environment CLI Configuration
---
{%- if cookiecutter.optional_sphinx_support == 'true' %}
- name: "build-docs"
  description: "Build the project's documentation."
  path: "documentation_root"
  commands:
    - '[ ! -d "./source/codebase/${PIB_PROJECT_NAME}/_autosummary" ] || rm -rf "./source/codebase/${PIB_PROJECT_NAME}/_autosummary"'
    - "make html"
  success: "Documentation Built"
  failure: "Error Building Documentation"
{%- endif %}
- name: "build-wheel"
  description: "Build a distribution wheel."
  path: "git_root"
  commands:
    - "poetry build"
  success: "Wheel Built"
  failure: "Error Building Wheel"
- name: "bump"
  description: "Increment the project's semantic version and create a Git tag."
  path: "git_root"
  commands:
    - "./scripts/utilities/version_bump.sh"
  success: "Version incremented and tag created."
  failure: "Could not increment version."
- name: "coverage"
  description: "Run code coverage test."
  path: "git_root"
  commands:
    - 'pytest --cov-report term-missing --cov-report html --cov-fail-under=100 --cov="${PIB_PROJECT_NAME}" "${PIB_PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}'
  success: "Coverage Passed!"
  failure: "Coverage Failed!"
- name: "fmt"
  description: "Run code formatters."
  container_only: true
  path: "git_root"
  commands:
    - './scripts/utilities/aspell_sort.sh'
    - 'tomll pyproject.toml'
    - 'yapf -i --recursive .'
    - 'isort "${PIB_PROJECT_NAME}"'
  success: "Formatting Finished!"
  failure: "Formatting Error!"
- name: "leaks"
  description: "Run a scan for leaked credentials in commits."
  container_only: true
  path: "git_root"
  commands:
    - 'trufflehog git file://. --fail --no-update'
  success: "Credential Leaks Test Passed!"
  failure: "Credential Leaks Test Failed!"
- name: "lint"
  description: "Run the code linters."
  path: "git_root"
  commands:
    - 'shellcheck ${PIB_PROJECT_NAME}/container_init.sh'
{%- if cookiecutter.optional_sphinx_support == 'true' %}
    - 'find "${PIB_PROJECT_NAME}" -name "*.py" | xargs darglint'
{%- endif %}
{%- if cookiecutter.optional_docstring_linting == 'true' %}
    - 'pydocstyle "${PIB_PROJECT_NAME}"'
    - 'pydocstyle --config=.pydocstyle.tests "${PIB_PROJECT_NAME}"'
{%- endif %}
    - 'yamllint .'
    - 'isort -c "${PIB_PROJECT_NAME}"'
    - 'pytest --pylint --pylint-jobs=2 "${PIB_PROJECT_NAME}"'
  success: "Linter Test Passed!"
  failure: "Linter Test Failed!"
- name: "reinstall-requirements"
  description: "Reinstall the project requirements."
  path: "git_root"
  commands:
    - "poetry lock"
    - "poetry install -E dev"
  success: "Reinstall Succeeded!"
  failure: "Reinstall Failed!"
- name: "sectest"
  description: "Run the security tests."
  path: "git_root"
  commands:
    - 'bandit -r "${PIB_PROJECT_NAME}" -c pyproject.toml -x tests'
    - 'echo "\nPoetry is exporting the lockfile standby..."'
    - 'poetry export --without-hashes -f requirements.txt | safety check --stdin'
  success: "Security Test Passed!"
  failure: "Security Test Failed!"
- name: "test"
  description: "Run the unittests."
  path: "git_root"
  commands:
    - 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
  success: "Unittests Passed!"
  failure: "Unittests Failed!"
{%- if cookiecutter.optional_typing_support == 'true' %}
- name: "types"
  description: "Run the type checker."
  path: "git_root"
  commands:
    - 'mypy --strict --show-error-codes --implicit-reexport ${PIB_PROJECT_NAME}'
  success: "Type Check Passed!"
  failure: "Type Check Failed!"
{%- endif %}
