# PIB CLI configuration for maintaining PIB Hooks
---
- name: "bump"
  description: "Increment the project's semantic version and create a Git tag."
  path: "git_root"
  commands: |
    set -e
    _BUMP_TYPE="$(cz bump --dry-run)"
    _BUMP_TYPE="$(echo "${_BUMP_TYPE}" | grep increment | cut -d":" -f2 | tr '[:upper:]' '[:lower:]' | xargs)"
    poetry version "${_BUMP_TYPE}"
    git stage .
    cz bump
  success: "Version incremented and tag created."
  failure: "Could not increment version."
- name: "coverage"
  description: "Run code coverage test."
  path: "git_root"
  commands:
    - 'pytest --cov-report term-missing --cov-report html --cov-fail-under=100 --cov="${PROJECT_NAME}" "${PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}'
  success: "Coverage Passed!"
  failure: "Coverage Failed!"
- name: "fmt"
  description: "Run code formatters."
  path: "git_root"
  commands:
    - 'tomll pyproject.toml'
    - 'yapf -i --recursive "${PROJECT_NAME}"'
    - 'isort "${PROJECT_NAME}"'
  success: "Formatting Finished!"
  failure: "Formatting Error!"
- name: "leaks"
  description: "Run a scan for leaked credentials in commits."
  path: "git_root"
  commands:
    - 'gitleaks detect -v'
  success: "Credential leaks Test Passed!"
  failure: "Credential leaks Test Failed!"
- name: "lint"
  description: "Run the code linters."
  path: "git_root"
  commands:
    - 'yamllint ${PROJECT_NAME} -c "{{cookiecutter.project_slug}}/.yamllint.yml"'
    - 'isort -c "${PROJECT_NAME}"'
    - 'pytest --pylint --pylint-jobs=2 "${PROJECT_NAME}"'
  success: "Linter Test Passed!"
  failure: "Linter Test Failed!"
- name: "reinstall-requirements"
  description: "Reinstall the project requirements."
  path: "git_root"
  commands:
    - "poetry lock"
    - "poetry install"
  success: "Reinstall Succeeded!"
  failure: "Reinstall Failed!"
- name: "sectest"
  description: "Run the security tests."
  path: "git_root"
  commands:
    - 'bandit -r "${PROJECT_NAME}" -c pyproject.toml -x tests'
    - 'echo "\nPoetry is exporting the lockfile standby..."'
    - 'poetry export --without-hashes -f requirements.txt | safety check --stdin'
  success: "Security Test Passed!"
  failure: "Security Test Failed!"
- name: "test"
  description: "Run the unittests."
  path: "git_root"
  commands:
    - 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
  success: "Unittests Passed!"
  failure: "Unittests Failed!"
- name: "types"
  description: "Run the type checker."
  path: "git_root"
  commands:
    - 'mypy --strict --show-error-codes --implicit-reexport ${PROJECT_NAME}'
  success: "Type Check Passed!"
  failure: "Type Check Failed!"
