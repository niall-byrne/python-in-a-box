# PIB CLI configuration for maintaining PIB Hooks
---
metadata:
  project_name: "hooks"
cli_definition:
  - name: "bump"
    description: "Increment the project's semantic version and create a Git tag."
    path: "git_root"
    commands:
      - "./{{cookiecutter.project_slug}}/scripts/utilities/version_bump.sh"
    success: "Version incremented and tag created."
    failure: "Could not increment version."
  - name: "coverage"
    description: "Run code coverage test."
    path: "git_root"
    commands:
      - 'pytest --cov-report term-missing --cov-report html --cov-fail-under=100 --cov="${PIB_PROJECT_NAME}" "${PIB_PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}'
    success: "Coverage Passed!"
    failure: "Coverage Failed!"
  - name: "fmt"
    description: "Run code formatters."
    path: "git_root"
    commands:
      - 'tomll pyproject.toml'
      - 'yapf -i --recursive "${PIB_PROJECT_NAME}"'
      - 'isort "${PIB_PROJECT_NAME}"'
    success: "Formatting Finished!"
    failure: "Formatting Error!"
  - name: "leaks"
    description: "Run a scan for leaked credentials in commits."
    path: "git_root"
    commands:
      - 'trufflehog git file://. --fail --no-update'
    success: "Credential leaks Test Passed!"
    failure: "Credential leaks Test Failed!"
  - name: "lint"
    description: "Run the code linters."
    path: "git_root"
    commands:
      - 'yamllint ${PIB_PROJECT_NAME} -c "{{cookiecutter.project_slug}}/.yamllint.yml"'
      - 'isort -c "${PIB_PROJECT_NAME}"'
      - 'pytest --pylint --pylint-jobs=2 "${PIB_PROJECT_NAME}"'
    success: "Linter Test Passed!"
    failure: "Linter Test Failed!"
  - name: "reinstall-requirements"
    description: "Reinstall the project requirements."
    path: "git_root"
    commands:
      - "poetry lock"
      - "poetry install"
    success: "Reinstall Succeeded!"
    failure: "Reinstall Failed!"
  - name: "sectest"
    description: "Run the security tests."
    path: "git_root"
    commands:
      - 'bandit -r "${PIB_PROJECT_NAME}" -c pyproject.toml -x tests'
      - 'echo "\nPoetry is exporting the lockfile standby..."'
      - 'poetry export --without-hashes -f requirements.txt | safety check --stdin'
    success: "Security Test Passed!"
    failure: "Security Test Failed!"
  - name: "test"
    description: "Run the unittests."
    path: "git_root"
    commands:
      - 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
    success: "Unittests Passed!"
    failure: "Unittests Failed!"
  - name: "types"
    description: "Run the type checker."
    path: "git_root"
    commands:
      - 'mypy --strict --show-error-codes --implicit-reexport ${PIB_PROJECT_NAME}'
    success: "Type Check Passed!"
    failure: "Type Check Failed!"
