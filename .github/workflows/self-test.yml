name: Python In A Box Self Test

# Required Github Repository Secrets:
# REMOTE_TOKEN      - Github Token With Access To This Repo
# REMOTE_ORIGIN     - The git remote repository name
# SLACK_WEBHOOK     - The slack webhook for build notifications

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

jobs:

  shellcheck_test:

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.7 ]

    steps:

      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Shellcheck -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
          echo "PROJECT_NAME=mmmm_cookies" >> $GITHUB_ENV
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Check Template Scripts
        run: |
          shellcheck ./template/test.sh
          shellcheck ./template/.github/scripts/*.sh
      - name: Shellcheck -- Check Rendered Template Scripts
        run: |
          shellcheck ${PROJECT_NAME}/.github/scripts/*.sh
          shellcheck ${PROJECT_NAME}/${PROJECT_NAME}/container_init.sh
          shellcheck ${PROJECT_NAME}/scripts/*.sh
          shellcheck ${PROJECT_NAME}/scripts/hooks/*

      - name: Shellcheck -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "shellcheck checks succeeded!"
      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "shellcheck checks failed!"

  documentation_test:

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.7 ]

    steps:

      - name: Documentation -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Documentation -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'
      - name: Documentation -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation -- Check Markdown Links For Readme
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.11
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: 'template, template/.github/workflows'
          max-depth: 1
      - name: Documentation -- Check Markdown Links For Rendered Template
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.11
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: './mmmm_cookies'
          max-depth: -1

      - name: Documentation -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "documentation checks succeeded!"
      - name: Documentation -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "documentation checks failed!"

  container_cli_test:

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:

      - name: Container Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Container Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'
      - name: Container Test -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
        env:
            WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Container Test -- Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .
      - name: Container Test -- Build Docker Image, Start Container
        run: |
          cd mmmm_cookies
          docker-compose build
          docker-compose up -d
          sleep 1
      - name: Container Test -- Run TOML Linter
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies tomll /app/pyproject.toml
      - name: Container Test -- Test Build Documentation
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev build-docs
      - name: Container Test -- Test Build Wheel
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev build-wheel
      - name: Container Test -- Test the Coverage Command
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev coverage
      - name: Container Test -- Test the Fmt Command
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev fmt
      - name: Container Test -- Test the Lint Command
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev lint
      - name: Container Test -- Test the Reinstall Requirements Command
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev reinstall-requirements
      - name: Container Test -- Test the Sectest Command
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev sectest
      - name: Container Test -- Test the Setup Command
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev setup
      - name: Container Test -- Test the Setup Bash Command
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev setup-bash
      - name: Container Test -- Test the Test Command
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies dev test
      - name: Container Test -- Test Priviledge Escalation
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies sudo ls -la /root
      - name: Container Test -- Test Patch Pep Compliance
        run: |
          cd mmmm_cookies
          docker-compose exec -T mmmm_cookies git apply patches/pep.patch
          docker-compose exec -T mmmm_cookies dev reinstall-requirements
          docker-compose exec -T mmmm_cookies black --check .
          docker-compose exec -T mmmm_cookies dev fmt

      - name: Container Test -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "container build succeeded"
      - name: Container Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "container build failed!"

  hostmachine_cli_test:

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:

      - name: Hostmachine Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Hostmachine Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'
      - name: Hostmachine Test -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh
          pip install poetry
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Hostmachine Test -- Install Additional Hostmachine Software
        run: |
          sudo apt-get install -y golang-github-pelletier-go-toml
          sudo curl --fail -sL "https://github.com/zricethezav/gitleaks/releases/download/${GITLEAKSVERSION}/gitleaks-linux-amd64" -o /usr/bin/gitleaks                                                                                         && \
          sudo chmod +x /usr/bin/gitleaks
        env:
          GITLEAKSVERSION: "v7.2.0"
      - name: Hostmachine Test -- Setup Hostmachine Test
        run: |
          cd mmmm_cookies
          ROOT="$(git rev-parse --show-toplevel)"
          echo "PIB_CONFIG_FILE_LOCATION=${ROOT}/assets/cli.yml" >> $GITHUB_ENV
          echo "PROJECT_NAME=mmmm_cookies" >> $GITHUB_ENV

      - name: Hostmachine Test -- Lint pyproject.toml
        run: |
          cd mmmm_cookies
          tomll pyproject.toml
      - name: Hostmachine Test -- Install Hostmachine Scripts
        run: |
          cd mmmm_cookies
          source ./scripts/extras.sh
          pib_setup_hostmachine
      - name: Hostmachine Test -- Test Build Documentation
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev build-docs
      - name: Hostmachine Test -- Test Build Wheel
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev build-wheel
      - name: Hostmachine Test -- Test the Coverage Command
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev coverage
      - name: Hostmachine Test -- Test the Fmt Command
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev fmt
      - name: Hostmachine Test -- Test the Lint Command
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev lint
      - name: Hostmachine Test -- Test the Reinstall Requirements Command
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev reinstall-requirements
      - name: Hostmachine Test -- Test the Sectest Command
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev sectest
      - name: Hostmachine Test -- Test the Setup Command
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev setup
      - name: Hostmachine Test -- Test the Setup Bash Command
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev setup-bash
      - name: Hostmachine Test -- Test the Test Command
        run: |
          cd mmmm_cookies
          source "$(poetry env info --path)/bin/activate"
          dev test
      - name: Hostmachine Test -- Test Patch Pep Compliance
        run: |
          cd mmmm_cookies
          git apply patches/pep.patch
          source "$(poetry env info --path)/bin/activate"
          dev reinstall-requirements
          black --check .
          dev fmt

      - name: Hostmachine Test -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "hostmachine build success!"
      - name: Hostmachine Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "hostmachine build failed!"

  push_repository_test:
    needs: [container_cli_test, documentation_test, hostmachine_cli_test, shellcheck_test]

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:

    - name: Push Template -- Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Push Template -- Checkout Repository
      uses: actions/checkout@v2
      with:
        path: 'template'
        persist-credentials: false

    - name: Push Template -- Setup Environment
      run: |
        source ./template/.github/scripts/setup.sh
        source ./template/.github/scripts/template.sh "GitHub Action" "action@github.com"
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Push Template -- Clean Up Tags for Git Push
      run: |
        cd mmmm_cookies
        git checkout master
        git tag --delete v0.0.0  # Don't Repush
        git tag v1.0.0
    - name: Push Template -- Push master
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.REMOTE_TOKEN }}
        branch: master
        tags: false
        directory: mmmm_cookies
        repository: ${{ secrets.REMOTE_ORIGIN }}
        force: true
    - name: Push Template -- Push production
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.REMOTE_TOKEN }}
        branch: production
        tags: false
        directory: mmmm_cookies
        repository: ${{ secrets.REMOTE_ORIGIN }}
        force: true
    - name: Push Template -- Push release tag
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.REMOTE_TOKEN }}
        branch: production
        tags: true
        directory: mmmm_cookies
        repository: ${{ secrets.REMOTE_ORIGIN }}
        force: true

    - name: Push Template -- Report Job Status on Success
      run: |
        ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "push has been triggered!"
    - name: Push Template -- Report Job Status on Failure
      if: failure()
      run: |
        ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "push has failed to trigger!"

  create_releases:
    needs: [push_repository_test]

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.7 ]

    steps:
      - name: Create Release -- Checkout Repository
        uses: actions/checkout@v1

      - name: Create Release -- Setup Environment
        if: contains(github.ref, '/tags/v')
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Prepare Release Content
        if: contains(github.ref, '/tags/v')
        run: |
          echo "{}" > package.json
      - name: Create Release -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        uses: scottbrenner/generate-changelog-action@1.0.3
        id: Changelog
        env:
          REPO: ${{ github.repository }}
      - name: Create Release -- Generate Github Release Draft
        if: contains(github.ref, '/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
            ## Deployment Checklist
            - [ ] Ensure correct version of pib_cli is installed
            - [ ] Ensure documentation is accurate
            - [ ] Ensure self test passes
          draft: true
          prerelease: false

      - name: Create Release -- Report Job Status on Success
        if: contains(github.ref, '/tags/v')
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "automated release has been created!\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"
      - name: Create Release -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" "automated release has failed!"
