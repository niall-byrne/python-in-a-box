---
name: Python In A Box Self Test

# Required Github Repository Secrets:
# REMOTE_TOKEN      - Github Token With Access To This Repo
# REMOTE_ORIGIN     - The git remote repository name
# SLACK_WEBHOOK     - The slack webhook for build notifications

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

# For now the action versions are hardcoded in this file.
# Hopefully we are eventually able to parameterize them.

env:
  PROJECT_NAME: "python-in-a-box"
  TEMPLATED_NAME: "mmmm_cookies"
  USERNAME: "niall-byrne"
  VERBOSE_NOTIFICATIONS: 0

jobs:

  container_cli_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.7
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 1
          - python-version: 3.8
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 2
          - python-version: 3.9
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 3

    steps:
      - name: Container Build Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Container Build Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Container Build Test -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "${SELECTION}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SELECTION_LOCKFILE: ${{ matrix.cookie-cutter-lockfile-selection }}
          SELECTION_PYTHON: ${{ matrix.cookie-cutter-python-selection }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Container Build Test -- Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Container Build Test -- Build Docker Image, Start Container
        run: |
          cd "${TEMPLATED_NAME}"
          bash -c 'source .github/scripts/build_container.sh'

      - name: Container Build Test -- Run TOML Linter
        run: |
          cd "${TEMPLATED_NAME}"
          docker-compose exec -T "${TEMPLATED_NAME}" tomll /app/pyproject.toml

      - name: Container Build Test -- Standardized CLI Test
        run: |
          cp ./template/.github/scripts/cli_test.sh "${TEMPLATED_NAME}/cli_test.sh"
          cd "${TEMPLATED_NAME}"
          docker-compose exec -T "${TEMPLATED_NAME}" bash -c 'source /app/cli_test.sh'

      - name: Container Build Test -- Test Priviledge Escalation
        run: |
          cd "${TEMPLATED_NAME}"
          docker-compose exec -T "${TEMPLATED_NAME}" sudo ls -la /root

      - name: Container Build Test -- Test Patch Pep Compliance
        run: |
          cd "${TEMPLATED_NAME}"
          docker-compose exec -T "${TEMPLATED_NAME}" bash -c 'source /app/.github/scripts/patch_pep.sh'

      - name: Container Build Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: container build for Python ${PYTHON_VERSION} was successful"

      - name: Container Build Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: container build for Python ${PYTHON_VERSION} failed!"

  container_production_build_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6
      matrix:
        include:
          - python-version: 3.7
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 1
          - python-version: 3.8
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 2
          - python-version: 3.9
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 3
          - python-version: 3.7
            cookie-cutter-lockfile-selection: 2
            cookie-cutter-python-selection: 1
          - python-version: 3.8
            cookie-cutter-lockfile-selection: 2
            cookie-cutter-python-selection: 2
          - python-version: 3.9
            cookie-cutter-lockfile-selection: 2
            cookie-cutter-python-selection: 3

    steps:
      - name: Container Production Build Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Container Production Build Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Container Production Build Test -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "${SELECTION}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SELECTION_LOCKFILE: ${{ matrix.cookie-cutter-lockfile-selection }}
          SELECTION_PYTHON: ${{ matrix.cookie-cutter-python-selection }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Container Production Build Test -- Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Container Production Build Test -- Create Mock Production Environment
        run: |
          cd "${TEMPLATED_NAME}"
          cp assets/local.env assets/production.env

      - name: Container Production Build Test -- Build Docker Image, Start Container
        run: |
          cd "${TEMPLATED_NAME}"
          bash -c 'source .github/scripts/build_container.sh docker-compose.production.yml'

      - name: Container Production Build Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: Production container build for Python ${PYTHON_VERSION} was successful"

      - name: Container Production Build Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: Production container build for Python ${PYTHON_VERSION} failed!"

  create_release:
    needs: [push_repository_test]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        if: contains(github.ref, '/tags/v')
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: contains(github.ref, '/tags/v')
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Prepare Release Content
        if: contains(github.ref, '/tags/v')
        run: |
          echo "{}" > package.json

      - name: Create Release -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        uses: scottbrenner/generate-changelog-action@v1.3.1
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Create Release -- Generate Github Release Draft
        if: contains(github.ref, '/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
            ## Deployment Checklist
            - [ ] Ensure correct version of pib_cli is installed
            - [ ] Ensure documentation is accurate
            - [ ] Ensure git commits are properly formatted
          draft: true
          prerelease: false

      - name: Create Release -- Report Job Status (Success)
        if: contains(github.ref, '/tags/v')
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status (Failure)
        if: failure() && contains(github.ref, '/tags/v')
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:
      - name: Documentation -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Documentation -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "1"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation -- Check Markdown Links For Readme
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.11
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: 'template, template/markdown, template/.github/workflows'
          max-depth: 1

      - name: Documentation -- Check Markdown Links For Rendered Template
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.11
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: ${{ env.TEMPLATED_NAME }}
          max-depth: -1

      - name: Documentation -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation checks were successful!"

      - name: Documentation -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation checks failed!"

  hostmachine_cli_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.7
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 1
          - python-version: 3.8
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 2
          - python-version: 3.9
            cookie-cutter-lockfile-selection: 1
            cookie-cutter-python-selection: 3

    steps:
      - name: Hostmachine Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Hostmachine Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Hostmachine Test -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "${SELECTION}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SELECTION_LOCKFILE: ${{ matrix.cookie-cutter-lockfile-selection }}
          SELECTION_PYTHON: ${{ matrix.cookie-cutter-python-selection }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Hostmachine Test -- Patch Environment
        run: |
          TEMPLATE_GIT_ROOT="$(pwd)/${TEMPLATED_NAME}"
          echo "PROJECT_NAME=${TEMPLATED_NAME}" >> "$GITHUB_ENV"
          echo "TEMPLATE_GIT_ROOT=${TEMPLATE_GIT_ROOT}" >> "$GITHUB_ENV"
          echo "PIB_CONFIG_FILE_LOCATION=${TEMPLATE_GIT_ROOT}/assets/cli.yml" >> $GITHUB_ENV
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Hostmachine Test -- Install Additional Hostmachine Software
        run: |
          sudo apt-get install -y golang-github-pelletier-go-toml
          sudo curl --fail -sL "https://github.com/zricethezav/gitleaks/releases/download/${GITLEAKSVERSION}/gitleaks-linux-amd64" -o /usr/bin/gitleaks
          sudo chmod +x /usr/bin/gitleaks
        env:
          GITLEAKSVERSION: "v7.2.0"

      - name: Hostmachine Test -- Remove Configuration Container Restrictions
        run: |
          sed -i 's/container_only: true/container_only: false/g' "${TEMPLATE_GIT_ROOT}/assets/cli.yml"

      - name: Hostmachine Test -- Lint pyproject.toml
        run: |
          cd "${TEMPLATED_NAME}"
          tomll pyproject.toml

      - name: Hostmachine Test -- Install Hostmachine Scripts
        run: |
          cd "${TEMPLATED_NAME}"
          source ./scripts/extras.sh
          pib_setup_hostmachine

      - name: Hostmachine Test -- Standardized CLI Test
        run: |
          cd "${TEMPLATED_NAME}"
          source "$(poetry env info --path)/bin/activate"
          source ../template/.github/scripts/cli_test.sh

      - name: Hostmachine Test -- Test Patch Pep Compliance
        run: |
          cd "${TEMPLATED_NAME}"
          source "$(poetry env info --path)/bin/activate"
          source .github/scripts/patch_pep.sh

      - name: Hostmachine Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: hostmachine for Python ${PYTHON_VERSION} build was successful!"

      - name: Hostmachine Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: hostmachine for Python ${PYTHON_VERSION} build failed!"

  push_repository_test:
    needs: [container_cli_test, container_production_build_test, documentation_test, hostmachine_cli_test, security_test, shellcheck_test, start_notification, workflow_lint_test]

    runs-on: ubuntu-latest

    steps:
      - name: Push Template -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'
          persist-credentials: false

      - name: Push Template -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/release_test.sh
          source ./template/.github/scripts/template.sh "1" "GitHub Action" "action@github.com"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Push Template -- Clean Up Tags for Git Push
        run: |
          cd "${TEMPLATED_NAME}"
          git checkout master
          git tag --delete v0.0.0  # Don't Repush
          git tag v1.0.0

      - name: Push Template -- Push master
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: master
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Template -- Push production
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Template -- Push release tag
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: true
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Template -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: push has been triggered!"

      - name: Push Template -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: push has failed to trigger!"

  security_test:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Gitleaks
        uses: zricethezav/gitleaks-action@v1.6.0

      - name: Security Test -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  shellcheck_test:

    runs-on: ubuntu-latest

    steps:
      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Shellcheck -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "1"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Check Template Scripts
        run: |
          source ./template/.github/scripts/shellcheck.sh

      - name: Shellcheck -- Check Rendered Template Scripts
        run: |
          cd ${TEMPLATED_NAME}
          source .github/scripts/shellcheck.sh

      - name: Shellcheck -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: shellcheck checks were successful!"

      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: shellcheck checks failed!"

  start_notification:
    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Start -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Success -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  workflow_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Workflow Lint -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Workflow Lint -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Create Template
        run: |
          source ./template/.github/scripts/template.sh "1"

      - name: Workflow Lint -- Lint Template Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./template/.github/workflows
          config_file: ./template/{{cookiecutter.project_slug}}/.yamllint.yml

      - name: Workflow Lint -- Lint Rendered Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./${{ env.TEMPLATED_NAME }}/.github/workflows
          config_file: ./${{ env.TEMPLATED_NAME }}/.yamllint.yml

      - name: Workflow Lint -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting was successful!"

      - name: Workflow Lint -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
