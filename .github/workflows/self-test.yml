---
name: Python In A Box Self Test

# Required Github Repository Secrets:
# REMOTE_TOKEN      - Github Token With Access To This Repo
# REMOTE_ORIGIN     - The git remote repository name
# SLACK_WEBHOOK     - The slack webhook for build notifications

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

jobs:

  container_cli_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.7
            cookie-cutter-selection: 1
          - python-version: 3.8
            cookie-cutter-selection: 2
          - python-version: 3.9
            cookie-cutter-selection: 3

    steps:
      - name: Container Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Container Test -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "${SELECTION}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SELECTION: ${{ matrix.cookie-cutter-selection }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Container Test -- Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Container Test -- Build Docker Image, Start Container
        run: |
          cd "${TEMPLATED_NAME}"
          bash -c 'source .github/scripts/build_container.sh'

      - name: Container Test -- Run TOML Linter
        run: |
          cd "${TEMPLATED_NAME}"
          docker-compose exec -T "${TEMPLATED_NAME}" tomll /app/pyproject.toml

      - name: Container Test -- Standardized CLI Test
        run: |
          cd "${TEMPLATED_NAME}"
          docker-compose exec -T "${TEMPLATED_NAME}" bash -c 'source /app/.github/scripts/cli_test.sh'

      - name: Container Test -- Test Priviledge Escalation
        run: |
          cd "${TEMPLATED_NAME}"
          docker-compose exec -T "${TEMPLATED_NAME}" sudo ls -la /root

      - name: Container Test -- Test Patch Pep Compliance
        run: |
          cd "${TEMPLATED_NAME}"
          docker-compose exec -T "${TEMPLATED_NAME}" bash -c 'source /app/.github/scripts/patch_pep.sh'

      - name: Container Test -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: container build for Python ${PYTHON_VERSION} was successful"

      - name: Container Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: container build for Python ${PYTHON_VERSION} failed!"

  create_releases:
    needs: [push_repository_test]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: actions/checkout@v1

      - name: Create Release -- Setup Environment
        if: contains(github.ref, '/tags/v')
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Prepare Release Content
        if: contains(github.ref, '/tags/v')
        run: |
          echo "{}" > package.json

      - name: Create Release -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        uses: scottbrenner/generate-changelog-action@1.0.3
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Create Release -- Generate Github Release Draft
        if: contains(github.ref, '/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
            ## Deployment Checklist
            - [ ] Ensure correct version of pib_cli is installed
            - [ ] Ensure documentation is accurate
            - [ ] Ensure git commits are properly formatted
          draft: true
          prerelease: false

      - name: Create Release -- Report Job Status (Success)
        if: contains(github.ref, '/tags/v')
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status (Failure)
        if: failure() && contains(github.ref, '/tags/v')
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:
      - name: Documentation -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Documentation -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "1"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation -- Check Markdown Links For Readme
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.11
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: 'template, template/.github/workflows'
          max-depth: 1

      - name: Documentation -- Check Markdown Links For Rendered Template
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.11
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: ${{ env.TEMPLATED_NAME }}
          max-depth: -1

      - name: Documentation -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation checks were successful!"

      - name: Documentation -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation checks failed!"

  hostmachine_cli_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.7
            cookie-cutter-selection: 1
          - python-version: 3.8
            cookie-cutter-selection: 2
          - python-version: 3.9
            cookie-cutter-selection: 3

    steps:
      - name: Hostmachine Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Hostmachine Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Hostmachine Test -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "${SELECTION}"
          pip install poetry
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SELECTION: ${{ matrix.cookie-cutter-selection }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Hostmachine Test -- Patch Environment
        run: |
          echo "PROJECT_NAME=${TEMPLATED_NAME}" >> "$GITHUB_ENV"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Hostmachine Test -- Install Additional Hostmachine Software
        run: |
          sudo apt-get install -y golang-github-pelletier-go-toml
          sudo curl --fail -sL "https://github.com/zricethezav/gitleaks/releases/download/${GITLEAKSVERSION}/gitleaks-linux-amd64" -o /usr/bin/gitleaks
          sudo chmod +x /usr/bin/gitleaks
        env:
          GITLEAKSVERSION: "v7.2.0"

      - name: Hostmachine Test -- Setup Hostmachine Test
        run: |
          cd "${TEMPLATED_NAME}"
          ROOT="$(git rev-parse --show-toplevel)"
          echo "PIB_CONFIG_FILE_LOCATION=${ROOT}/assets/cli.yml" >> $GITHUB_ENV

      - name: Hostmachine Test -- Lint pyproject.toml
        run: |
          cd "${TEMPLATED_NAME}"
          tomll pyproject.toml

      - name: Hostmachine Test -- Install Hostmachine Scripts
        run: |
          cd "${TEMPLATED_NAME}"
          source ./scripts/extras.sh
          pib_setup_hostmachine

      - name: Hostmachine Test -- Standardized CLI Test
        run: |
          cd "${TEMPLATED_NAME}"
          source "$(poetry env info --path)/bin/activate"
          source .github/scripts/cli_test.sh

      - name: Hostmachine Test -- Test Patch Pep Compliance
        run: |
          cd "${TEMPLATED_NAME}"
          source "$(poetry env info --path)/bin/activate"
          source .github/scripts/patch_pep.sh

      - name: Hostmachine Test -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: hostmachine for Python ${PYTHON_VERSION} build was successful!"

      - name: Hostmachine Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: hostmachine for Python ${PYTHON_VERSION} build failed!"

  push_repository_test:
    needs: [container_cli_test, documentation_test, hostmachine_cli_test, security_test, shellcheck_test, workflow_lint_test]

    runs-on: ubuntu-latest

    steps:
      - name: Push Template -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'
          persist-credentials: false

      - name: Push Template -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/release_test.sh
          source ./template/.github/scripts/template.sh "1" "GitHub Action" "action@github.com"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Push Template -- Clean Up Tags for Git Push
        run: |
          cd "${TEMPLATED_NAME}"
          git checkout master
          git tag --delete v0.0.0  # Don't Repush
          git tag v1.0.0

      - name: Push Template -- Push master
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: master
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Template -- Push production
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Template -- Push release tag
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: true
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Template -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: push has been triggered!"

      - name: Push Template -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: push has failed to trigger!"

  security_test:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v1

      - name: Security Test -- Run Gitleaks
        uses: zricethezav/gitleaks-action@master

      - name: Security Test -- Report Job Status on Success
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  shellcheck_test:

    runs-on: ubuntu-latest

    steps:
      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Shellcheck -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          source ./template/.github/scripts/template.sh "1"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Check Template Scripts
        run: |
          source ./template/.github/scripts/shellcheck.sh

      - name: Shellcheck -- Check Rendered Template Scripts
        run: |
          cd ${TEMPLATED_NAME}
          source .github/scripts/shellcheck.sh

      - name: Shellcheck -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: shellcheck checks were successful!"

      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: shellcheck checks failed!"

  workflow_lint_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
      - name: Workflow Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Workflow Lint -- Checkout Repository
        uses: actions/checkout@v2
        with:
          path: 'template'

      - name: Workflow Lint -- Setup Environment
        run: |
          source ./template/.github/scripts/setup.sh
          pip install yamllint
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Create Template
        run: |
          source ./template/.github/scripts/template.sh "1"

      - name: Workflow Lint PIB -- Run Linter
        run: |
          yamllint ./template/.github/workflows -c ./template/{{cookiecutter.project_slug}}/.yamllint.yml -f standard

      - name: Workflow Lint Template -- Run Linter
        run: |
          cd "${TEMPLATED_NAME}"
          yamllint .github/workflows -c .yamllint.yml -f standard

      - name: Workflow Lint -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting was successful!"

      - name: Workflow Lint -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
